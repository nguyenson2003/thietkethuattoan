#BlueJ class context
comment0.target=Graph
comment0.text=\r\n\ \ The\ {@code\ Graph}\ class\ represents\ an\ undirected\ graph\ of\ vertices\r\n\ \ named\ 0\ through\ <em>V</em>\ \u2013\ 1.\r\n\ \ It\ supports\ the\ following\ two\ primary\ operations\:\ add\ an\ edge\ to\ the\ graph,\r\n\ \ iterate\ over\ all\ of\ the\ vertices\ adjacent\ to\ a\ vertex.\ It\ also\ provides\r\n\ \ methods\ for\ returning\ the\ number\ of\ vertices\ <em>V</em>\ and\ the\ number\r\n\ \ of\ edges\ <em>E</em>.\ Parallel\ edges\ and\ self-loops\ are\ permitted.\r\n\ \ By\ convention,\ a\ self-loop\ <em>v</em>-<em>v</em>\ appears\ in\ the\r\n\ \ adjacency\ list\ of\ <em>v</em>\ twice\ and\ contributes\ two\ to\ the\ degree\r\n\ \ of\ <em>v</em>.\r\n\ \ <p>\r\n\ \ This\ implementation\ uses\ an\ adjacency-lists\ representation,\ which\ \r\n\ \ is\ a\ vertex-indexed\ array\ of\ {@link\ Bag}\ objects.\r\n\ \ All\ operations\ take\ constant\ time\ (in\ the\ worst\ case)\ except\r\n\ \ iterating\ over\ the\ vertices\ adjacent\ to\ a\ given\ vertex,\ which\ takes\r\n\ \ time\ proportional\ to\ the\ number\ of\ such\ vertices.\r\n\ \ <p>\r\n\ \ For\ additional\ documentation,\ see\ <a\ href\="https\://algs4.cs.princeton.edu/41graph">Section\ 4.1</a>\r\n\ \ of\ <i>Algorithms,\ 4th\ Edition</i>\ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=V
comment1.target=Graph(int)
comment1.text=\r\n\ Initializes\ an\ empty\ graph\ with\ {@code\ V}\ vertices\ and\ 0\ edges.\r\n\ param\ V\ the\ number\ of\ vertices\r\n\r\n\ @param\ \ V\ number\ of\ vertices\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ V\ <\ 0}\r\n
comment10.params=
comment10.target=java.lang.String\ toString()
comment10.text=\r\n\ Returns\ a\ string\ representation\ of\ this\ graph.\r\n\r\n\ @return\ the\ number\ of\ vertices\ <em>V</em>,\ followed\ by\ the\ number\ of\ edges\ <em>E</em>,\r\n\ \ \ \ \ \ \ \ \ followed\ by\ the\ <em>V</em>\ adjacency\ lists\r\n
comment11.params=args
comment11.target=void\ main(java.lang.String[])
comment11.text=\r\n\ Unit\ tests\ the\ {@code\ Graph}\ data\ type.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment2.params=in
comment2.target=Graph(In)
comment2.text=\ \ \r\n\ Initializes\ a\ graph\ from\ the\ specified\ input\ stream.\r\n\ The\ format\ is\ the\ number\ of\ vertices\ <em>V</em>,\r\n\ followed\ by\ the\ number\ of\ edges\ <em>E</em>,\r\n\ followed\ by\ <em>E</em>\ pairs\ of\ vertices,\ with\ each\ entry\ separated\ by\ whitespace.\r\n\r\n\ @param\ \ in\ the\ input\ stream\r\n\ @throws\ IllegalArgumentException\ if\ the\ endpoints\ of\ any\ edge\ are\ not\ in\ prescribed\ range\r\n\ @throws\ IllegalArgumentException\ if\ the\ number\ of\ vertices\ or\ edges\ is\ negative\r\n\ @throws\ IllegalArgumentException\ if\ the\ input\ stream\ is\ in\ the\ wrong\ format\r\n
comment3.params=G
comment3.target=Graph(Graph)
comment3.text=\r\n\ Initializes\ a\ new\ graph\ that\ is\ a\ deep\ copy\ of\ {@code\ G}.\r\n\r\n\ @param\ \ G\ the\ graph\ to\ copy\r\n
comment4.params=
comment4.target=int\ V()
comment4.text=\r\n\ Returns\ the\ number\ of\ vertices\ in\ this\ graph.\r\n\r\n\ @return\ the\ number\ of\ vertices\ in\ this\ graph\r\n
comment5.params=
comment5.target=int\ E()
comment5.text=\r\n\ Returns\ the\ number\ of\ edges\ in\ this\ graph.\r\n\r\n\ @return\ the\ number\ of\ edges\ in\ this\ graph\r\n
comment6.params=v
comment6.target=void\ validateVertex(int)
comment7.params=v\ w
comment7.target=void\ addEdge(int,\ int)
comment7.text=\r\n\ Adds\ the\ undirected\ edge\ v-w\ to\ this\ graph.\r\n\r\n\ @param\ \ v\ one\ vertex\ in\ the\ edge\r\n\ @param\ \ w\ the\ other\ vertex\ in\ the\ edge\r\n\ @throws\ IllegalArgumentException\ unless\ both\ {@code\ 0\ <\=\ v\ <\ V}\ and\ {@code\ 0\ <\=\ w\ <\ V}\r\n
comment8.params=v
comment8.target=java.lang.Iterable\ adj(int)
comment8.text=\r\n\ Returns\ the\ vertices\ adjacent\ to\ vertex\ {@code\ v}.\r\n\r\n\ @param\ \ v\ the\ vertex\r\n\ @return\ the\ vertices\ adjacent\ to\ vertex\ {@code\ v},\ as\ an\ iterable\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ v\ <\ V}\r\n
comment9.params=v
comment9.target=int\ degree(int)
comment9.text=\r\n\ Returns\ the\ degree\ of\ vertex\ {@code\ v}.\r\n\r\n\ @param\ \ v\ the\ vertex\r\n\ @return\ the\ degree\ of\ vertex\ {@code\ v}\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ v\ <\ V}\r\n
numComments=12
